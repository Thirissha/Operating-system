#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <dirent.h>
#include <sys/stat.h>

// Function to create a directory if it doesn't exist
int createDirectory(const char *path) {
    struct stat st;
    if (stat(path, &st) == -1) {
        if (mkdir(path, 0700) != 0) {
            perror("Error creating directory");
            return -1;
        }
    }
    return 0;
}

// Function to move a file to a destination directory
void moveFile(const char *srcPath, const char *destPath) {
    if (rename(srcPath, destPath) != 0) {
        perror("Error moving file");
    }
}

// Function to organize files in subdirectories based on file extensions
void organizeFiles(const char *sourceDir) {
    struct dirent *entry;
    DIR *dp = opendir(sourceDir);

    if (dp == NULL) {
        perror("Error opening source directory");
        return;
    }

    struct stat st;
    char srcPath[PATH_MAX];
    char destPath[PATH_MAX];

    while ((entry = readdir(dp)) != NULL) {
        if (entry->d_type == DT_REG) {
            snprintf(srcPath, sizeof(srcPath), "%s/%s", sourceDir, entry->d_name);
            stat(srcPath, &st);

            if (S_ISREG(st.st_mode)) {
                // Organize based on file extensions
                const char *ext = strrchr(entry->d_name, '.');
                if (ext) {
                    char extensionDir[PATH_MAX];
                    snprintf(extensionDir, sizeof(extensionDir), "%s/%s", sourceDir, ext + 1);
                    createDirectory(extensionDir);

                    snprintf(destPath, sizeof(destPath), "%s/%s", extensionDir, entry->d_name);
                    moveFile(srcPath, destPath);
                }
            }
        }
    }
    closedir(dp);
}

int main() {
    const char *sourceDir = "source_directory";

    createDirectory(sourceDir);
    organizeFiles(sourceDir);

    printf("Files organized successfully.\n");

    return 0;
}
