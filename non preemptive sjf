#include <stdio.h>

// Structure to represent a process
struct Process {
    int id;       // Process ID
    int burst;    // Burst time
};

// Function to find the waiting time for each process
void findWaitingTime(struct Process processes[], int n, int waitingTime[]) {
    waitingTime[0] = 0; // The first process has 0 waiting time

    for (int i = 1; i < n; i++) {
        waitingTime[i] = 0;
        for (int j = 0; j < i; j++) {
            waitingTime[i] += processes[j].burst;
        }
    }
}

// Function to find the turnaround time for each process
void findTurnaroundTime(struct Process processes[], int n, int waitingTime[], int turnaroundTime[]) {
    for (int i = 0; i < n; i++) {
        turnaroundTime[i] = processes[i].burst + waitingTime[i];
    }
}

// Function to calculate the average waiting time and average turnaround time
void findAverageTime(struct Process processes[], int n) {
    int waitingTime[n];
    int turnaroundTime[n];

    findWaitingTime(processes, n, waitingTime);
    findTurnaroundTime(processes, n, waitingTime, turnaroundTime);

    int totalWaitingTime = 0;
    int totalTurnaroundTime = 0;

    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
        totalWaitingTime += waitingTime[i];
        totalTurnaroundTime += turnaroundTime[i];

        printf("%d\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burst, waitingTime[i], turnaroundTime[i]);
    }

    float averageWaitingTime = (float)totalWaitingTime / n;
    float averageTurnaroundTime = (float)totalTurnaroundTime / n;

    printf("\nAverage Waiting Time: %.2f\n", averageWaitingTime);
    printf("Average Turnaround Time: %.2f\n", averageTurnaroundTime);
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input the burst times for each process
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter the burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burst);
    }

    // Sort the processes based on burst time (SJF)
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (processes[i].burst > processes[j].burst) {
                struct Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    printf("\nSJF (Non-Preemptive) Scheduling:\n");
    findAverageTime(processes, n);

    return 0;
}
